{"version":3,"sources":["utils/index.tsx","components/Navigation/Navigation.tsx","components/Task/Task.tsx","global/reducers/tasksReducer.ts","components/TaskList/TaskList.tsx","pages/Home.tsx","pages/AboutUs.tsx","pages/ContactUs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getBaseURL","process","CustomLink","_ref","children","props","baseURL","resolvedPath","useResolvedPath","url","isActive","useMatch","path","pathname","end","_jsx","className","Link","to","Navigation","_jsxs","Task","task","dispatch","done","name","id","onClick","e","type","taskId","tasksReducer","tasks","action","taskName","updatedTaskIdx","findIndex","updatedTasks","updatedTask","splice","filter","TaskList","useReducer","idx","setIdx","useState","taskInput","useRef","_Fragment","autoFocus","ref","_taskInput$current","preventDefault","current","value","map","index","Home","AboutUs","ContactUs","App","Routes","Route","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.86631e8b.chunk.js","sourcesContent":["export const getBaseURL = function() {\n  return process.env.REACT_APP_BASE_URL || \"\";\n}\n\nexport const printE2ETestInfo = function (baseURL, driver) {\n  console.log(\"**********************************\");\n  console.log(\"TESTING ENVIRONMENT INFORAMTION\");\n  console.log(\"Base URL:\", baseURL);\n  console.log(\"Driver:\", driver);\n  console.log(\"**********************************\");\n};","import { Link, useMatch, useResolvedPath } from \"react-router-dom\";\nimport \"./Navigation.scss\";\nimport { getBaseURL } from \"../../utils\";\n\nfunction Navigation(): JSX.Element { \n  return (\n    <nav>\n      <ul>\n        <CustomLink url='/'>Home</CustomLink>\n        <CustomLink url='/about-us'>About Us</CustomLink>\n        <CustomLink url='/contact-us'>Contact Us</CustomLink>\n      </ul>\n    </nav>\n  );\n}\n\nfunction CustomLink({children, ...props }): JSX.Element {\n  const baseURL = getBaseURL();\n  const resolvedPath = useResolvedPath(props.url);  \n  const isActive = useMatch({path: resolvedPath.pathname, end: true});\n  const url = baseURL === \"/\" ? props.url : baseURL + props.url;\n  return (\n    <li className={isActive ? \"navigation--active\" : \"\"}>\n      <Link to={url}>{children}</Link>\n    </li>\n  );\n};\n\nexport default Navigation;","import \"./Task.scss\";\n\nfunction Task({ task, dispatch }): JSX.Element {\n  return (\n    <div className='card card-body mt-2'>\n      <div className='row'>\n        <div className='col-md-9'>\n          <h2 className={task.done ? \"task--done\" : \"\"}>\n            {task.name} - {task.id}\n          </h2>\n        </div>\n        <div className='col-md-3'>\n          <button\n            className='btn btn-primary ml-3 mr-1'\n            data-testid='change-task-button'\n            onClick={(e) => {\n              dispatch({\n                type: \"change_task\",\n                taskId: task.id,\n              });\n            }}>\n            {task.done ? \"‚úì\" : \"ùòü\"}\n          </button>\n          <button\n            className='btn btn-warning'\n            data-testid='remove-task-button'\n            onClick={() => {\n              dispatch({\n                type: \"remove_task\",\n                taskId: task.id,\n              });\n            }}>\n            üóë\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Task;\n","import { Reducer } from \"react\";\nimport { ITask } from \"../interfaces\";\n\ninterface Action {\n  type: string;\n  taskId?: any;\n  taskName?: any;\n}\n\nexport const tasksReducer: Reducer<ITask[], Action> = (tasks, action) => { \n  switch (action.type) {\n    case 'add_task':\n      return [\n        ...tasks,\n        {\n          id: action.taskId,\n          name: action.taskName,\n          done: false\n        }\n      ];\n    case 'change_task':\n      const updatedTaskIdx: number = tasks.findIndex(task => task.id === action.taskId);\n      if (updatedTaskIdx > -1) {\n        const updatedTasks = [...tasks];\n        const updatedTask = {\n          ...updatedTasks[updatedTaskIdx],\n          done: !updatedTasks[updatedTaskIdx].done\n        };        \n        updatedTasks.splice(updatedTaskIdx, 1, updatedTask);        \n        return updatedTasks;\n      }\n      return tasks;\n    case 'remove_task':\n      return [...tasks.filter(task => task.id !== action.taskId)];\n  \n    default:\n      return tasks;\n  }\n}","import React, { useState, useReducer, useRef } from \"react\";\nimport { ITask } from \"../../global/interfaces\";\nimport { tasksReducer } from \"../../global/reducers\";\nimport { Task } from \"../../components\";\n\nfunction TaskList(): JSX.Element { \n  const [tasks, dispatch] = useReducer(tasksReducer, []);\n  const [idx, setIdx] = useState(0);\n  const taskInput = useRef<HTMLInputElement>(null);\n\n  const handleSaveClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    dispatch({\n      type: \"add_task\",\n      taskId: idx,\n      taskName: taskInput.current?.value || \"\",\n    });\n    setIdx(idx + 1);\n  };\n\n  return (\n    <>\n      <div className='container'>\n        <div className='row'>\n          <div className='col-md-6 offset-md-3'>\n            <div className='card mt-4'>\n              <div className='card-body'>\n                <form>\n                  <input\n                    className='form-control'\n                    data-testid='task-input'\n                    type='text'\n                    autoFocus\n                    ref={taskInput}\n                  />\n                  <button\n                    className='btn btn-success btn-block mt-3'\n                    data-testid='save-task-button'\n                    onClick={handleSaveClick}>\n                    Save\n                  </button>\n                </form>\n              </div>\n            </div>\n            {tasks.map((task: ITask, index: number) => (\n              <Task task={task} dispatch={dispatch} key={index} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\nexport default TaskList;","function Home(): JSX.Element { \n  return (<h1>Home</h1>);\n}\n\nexport default Home;\n","function AboutUs(): JSX.Element {\n  return <h1>About Us</h1>;\n}\n\nexport default AboutUs;\n","function ContactUs(): JSX.Element {\n  return <h1>ContactUs</h1>;\n}\n\nexport default ContactUs;\n","import { Route, Routes } from \"react-router-dom\";\nimport { Navigation } from \"./components\";\nimport { Home, AboutUs, ContactUs } from \"./pages\";\nimport { TaskList } from \"./components\";\nimport { getBaseURL } from \"./utils\";\n\nfunction App(): JSX.Element {\n  const baseURL = getBaseURL();   \n  return (\n    <>\n      <Navigation />\n      <Routes>\n        <Route path={baseURL} element={<Home />} />\n        <Route path={baseURL + '/about-us'} element={<AboutUs />} />\n        <Route path={baseURL + '/contact-us'} element={<ContactUs />} />\n      </Routes>\n      <TaskList />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootswatch/dist/lumen/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}